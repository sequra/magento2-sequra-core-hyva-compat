<?php
/** @var \Sequra\Core\Block\WidgetInitializer $block */
/** @var \Hyva\Theme\ViewModel\HyvaCsp|null $hyvaCsp */

$widgetData = $block->getWidgetInitializeData();
?>

<?php if (!empty($widgetData)): ?>
    <?php if (isset($hyvaCsp) && $hyvaCsp instanceof \Hyva\Theme\ViewModel\HyvaCsp) {
        $hyvaCsp->registerInlineScript();
    } ?>

    <style>
        .sequra-educational-popup {
            color: #009C5C;
            cursor: pointer;
        }
    </style>

    <div x-data="sequraInitConfig" x-init="init()"></div>

    <script>
        function sequraInitConfig() {
            return {
                init() {
                    if (window.__sequraInitDone) {
                        return;
                    }
                    window.__sequraInitDone = true;

                    const cfg = {
                        scriptUri: "<?= $block->escapeQuote($widgetData['scriptUri']); ?>",
                        thousandSeparator: "<?= $block->escapeQuote($widgetData['thousandSeparator']); ?>",
                        decimalSeparator: "<?= $block->escapeQuote($widgetData['decimalSeparator']); ?>",
                        locale: "<?= $block->escapeQuote($widgetData['locale']); ?>",
                        merchant: "<?= $block->escapeQuote($widgetData['merchantId']); ?>",
                        assetKey: "<?= $block->escapeQuote($widgetData['assetKey']); ?>",
                        products: <?= json_encode($widgetData['products'],
                                JSON_UNESCAPED_SLASHES | JSON_THROW_ON_ERROR); ?>
                    };
                    const w = (window.SequraWidgetFacade = window.SequraWidgetFacade || {});
                    Object.assign(w, cfg);

                    this.installSequraBootstrap(w);
                    this.loadSequraScript(w.scriptUri);

                    this.setupFacadeMethods();
                    window.SequraWidgetFacade.init?.();

                    this.onSequraLoad(() => {
                        window.SequraWidgetFacade.drawWidgetsOnPage?.();
                    });
                },

                installSequraBootstrap(facade) {
                    window.SequraConfiguration = facade;
                    window.SequraOnLoad = window.SequraOnLoad || [];
                    window.Sequra = window.Sequra || {};
                    window.Sequra.onLoad = (cb) => window.SequraOnLoad.push(cb);
                },

                loadSequraScript(src) {
                    if (!src || document.querySelector('script[data-sequra-sdk="1"]')) return;
                    const s = document.createElement('script');
                    s.async = true;
                    s.dataset.sequraSdk = '1';
                    s.src = src;
                    document.head.appendChild(s);
                },

                onSequraLoad(cb) {
                    (window.Sequra?.onLoad ? window.Sequra.onLoad : (fn => window.SequraOnLoad.push(fn)))(cb);
                },

                setupFacadeMethods() {
                    const F = window.SequraWidgetFacade;
                    Object.assign(F, {
                        widgets: Array.isArray(F.widgets) ? F.widgets : [],
                        miniWidgets: Array.isArray(F.miniWidgets) ? F.miniWidgets : [],
                        mutationObserver: null,
                        presets: {
                            L: '{"alignment":"left"}',
                            R: '{"alignment":"right"}',
                            legacy: '{"type":"legacy"}',
                            legacyL: '{"type":"legacy","alignment":"left"}',
                            legacyR: '{"type":"legacy","alignment":"right"}',
                            minimal: '{"type":"text","branding":"none","size":"S","starting-text":"as-low-as"}',
                            minimalL: '{"type":"text","branding":"none","size":"S","starting-text":"as-low-as","alignment":"left"}',
                            minimalR: '{"type":"text","branding":"none","size":"S","starting-text":"as-low-as","alignment":"right"}'
                        },

                        init() {
                            const uniqueWidgets = [];

                            this.widgets.forEach(widget => {
                                Object.keys(widget).forEach(key => {
                                    if (typeof widget[key] === 'string') {
                                        widget[key] = this.decodeEntities(widget[key]);
                                    }
                                });

                                const already = uniqueWidgets.some(w =>
                                    w.priceSel === widget.priceSel &&
                                    w.dest === widget.dest &&
                                    w.product === widget.product &&
                                    w.theme === widget.theme &&
                                    w.reverse === widget.reverse &&
                                    w.campaign === widget.campaign
                                );

                                if (!already) uniqueWidgets.push(widget);
                            });

                            this.widgets = uniqueWidgets;
                        },

                        nodeToCents(node) {
                            return this.textToCents(node ? node.textContent : "0");
                        },

                        decodeEntities(encodedString) {
                            if (!encodedString.match(/&(nbsp|amp|quot|lt|gt|#\d+|#x[0-9A-Fa-f]+);/g)) {
                                return encodedString;
                            }
                            const elem = document.createElement('div');
                            elem.innerHTML = encodedString;
                            return elem.textContent;
                        },

                        textToCents(text) {
                            const thousandSeparator = this.decodeEntities(this.thousandSeparator);
                            const decimalSeparator = this.decodeEntities(this.decimalSeparator);

                            text = text.replace(/^\D*/, '').replace(/\D*$/, '');
                            if (text.indexOf(decimalSeparator) < 0) {
                                text += decimalSeparator + '00';
                            }
                            return this.floatToCents(
                                parseFloat(
                                    text
                                        .replace(thousandSeparator, '')
                                        .replace(decimalSeparator, '.')
                                )
                            );
                        },

                        floatToCents(value) {
                            return parseInt(value.toFixed(2).replace('.', ''), 10);
                        },

                        refreshComponents() {
                            Sequra.onLoad(
                                function () {
                                    Sequra.refreshComponents();
                                }
                            );
                        },

                        isAlternativeTriggerSelectorAvailable(widget) {
                            return widget.altPriceSel !== '' && widget.altTriggerSelector !== ''
                        },

                        isSpecialProduct(selector) {
                            return !!document.querySelector(selector);
                        },

                        getPriceSelector(widget) {
                            if (
                                this.isAlternativeTriggerSelectorAvailable(widget) &&
                                this.isSpecialProduct(widget.altTriggerSelector)) {
                                return widget.altPriceSel;
                            }

                            return widget.priceSel;
                        },

                        getWidgetTargets(parentElem, widget, observedAt) {
                            const targets = [];
                            if (widget.dest) {
                                const children = parentElem.querySelectorAll(widget.dest);
                                const productObservedAttr = 'data-sequra-observed-' + widget.product;
                                for (const child of children) {
                                    if (child.getAttribute(productObservedAttr) == observedAt) {
                                        continue;
                                    }
                                    child.setAttribute(productObservedAttr, observedAt);
                                    targets.push({elem: child, widget});
                                }
                            }
                            return targets;
                        },

                        getMiniWidgetTargets(widget) {
                            const targets = [];
                            if (widget.dest) {
                                const children = document.querySelectorAll(widget.dest);
                                const prices = document.querySelectorAll(widget.priceSel);
                                const priceObservedAttr = 'data-sequra-observed-price-' + widget.product;

                                for (let i = 0; i < children.length; i++) {
                                    const child = children[i];

                                    const priceElem = 'undefined' !== typeof prices[i] ? prices[i] : null;
                                    const priceValue = priceElem ? this.nodeToCents(priceElem) : null;

                                    if (null === priceValue || child.getAttribute(priceObservedAttr) == priceValue) {
                                        continue;
                                    }
                                    child.setAttribute(priceObservedAttr, priceValue);
                                    targets.push({elem: child, priceElem, widget});
                                }
                            }
                            return targets;
                        },

                        getObservedAt() {
                            return Date.now();
                        },

                        refreshWidgets() {
                            const targets = [];
                            for (const widget of this.widgets) {
                                const widgetTargets = this.getWidgetTargets(document, widget, this.getObservedAt());
                                targets.push(...widgetTargets);
                            }
                            for (const miniWidget of this.miniWidgets) {
                                const widgetTargets = this.getMiniWidgetTargets(miniWidget);
                                targets.push(...widgetTargets);
                            }

                            targets.forEach(target => {
                                const {elem, widget} = target;
                                this.isMiniWidget(widget) ? this.drawMiniWidgetOnElement(widget, elem, target.priceElem) : this.drawWidgetOnElement(widget, elem);
                            });
                        },

                        drawWidgetsOnPage() {
                            for (const widget of document.querySelectorAll('.sequra-educational-popup.sequra-promotion-miniwidget')) {
                                const {amount, product, message, messageBelowLimit} = widget.dataset;
                                const innerText = this.getMiniWidgetInnerText(
                                    parseInt(amount),
                                    product,
                                    message,
                                    !messageBelowLimit ? null : messageBelowLimit
                                );

                                if (!innerText) {
                                    widget.remove();
                                    continue;
                                }
                                widget.innerText = innerText;
                            }

                            if (!this.widgets.length && !this.miniWidgets.length) {
                                return;
                            }

                            if (this.mutationObserver) {
                                this.mutationObserver.disconnect();
                            }

                            this.refreshWidgets();

                            this.mutationObserver = new MutationObserver((mutations) => {
                                this.mutationObserver.disconnect();
                                for (const mutation of mutations) {
                                    if (['childList', 'subtree', 'characterData'].includes(mutation.type)) {
                                        this.refreshWidgets();
                                        break;
                                    }
                                }
                                this.mutationObserver.observe(document, {
                                    childList: true,
                                    subtree: true,
                                    characterData: true
                                });
                            });

                            this.mutationObserver.observe(document, {
                                childList: true,
                                subtree: true,
                                characterData: true
                            });
                        },

                        isMiniWidget(widget) {
                            return this.miniWidgets.indexOf(widget) !== -1;
                        },

                        isAmountInAllowedRange(widget, cents) {
                            if ('undefined' !== typeof widget.minAmount && widget.minAmount && cents < widget.minAmount) {
                                return false;
                            }

                            return !(
                                'undefined' !== typeof widget.maxAmount &&
                                widget.maxAmount &&
                                parseInt(widget.maxAmount, 10) !== 0 &&
                                widget.maxAmount < cents
                            );
                        },

                        drawMiniWidgetOnElement(widget, element, priceElem) {
                            if (!priceElem) {
                                const priceSrc = this.getPriceSelector(widget);
                                priceElem = document.querySelector(priceSrc);
                                if (!priceElem) {
                                    return;
                                }
                            }
                            const cents = this.nodeToCents(priceElem);
                            const className = 'sequra-educational-popup sequra-promotion-miniwidget';
                            const modifierClassName = className + '--' + widget.product;

                            const oldWidget = element.parentNode.querySelector('.' + className + '.' + modifierClassName);
                            if (oldWidget) {
                                if (cents == oldWidget.getAttribute('data-amount')) {
                                    return;
                                }

                                oldWidget.remove();
                            }

                            if (!this.isAmountInAllowedRange(widget, cents)) {
                                return;
                            }

                            const widgetNode = document.createElement('small');
                            widgetNode.className = className + ' ' + modifierClassName;
                            widgetNode.setAttribute('data-amount', cents);
                            widgetNode.setAttribute('data-product', widget.product);

                            const innerText = this.getMiniWidgetInnerText(
                                cents,
                                widget.product,
                                widget.message,
                                'undefined' !== typeof widget.messageBelowLimit ? widget.messageBelowLimit : null
                            );

                            if (!innerText) {
                                return;
                            }
                            widgetNode.innerText = innerText;

                            if (element.nextSibling) {
                                element.parentNode.insertBefore(widgetNode, element.nextSibling);
                                this.refreshComponents();
                            } else {
                                element.parentNode.appendChild(widgetNode);
                            }
                        },

                        getMiniWidgetInnerText(cents, product, message, messageBelowLimit) {
                            const creditAgreements = Sequra.computeCreditAgreements({
                                amount: cents,
                                product: product
                            })[product];
                            let creditAgreement = null
                            do {
                                creditAgreement = creditAgreements.pop();
                            } while (cents < creditAgreement.min_amount.value && creditAgreements.length > 1);
                            if (cents < creditAgreement.min_amount.value && !messageBelowLimit) {
                                return null;
                            }

                            if (cents >= creditAgreement.min_amount.value) {
                                return message.replace('%s', creditAgreement.instalment_total.string);
                            } else {
                                return !messageBelowLimit ? null : messageBelowLimit.replace('%s', creditAgreement.min_amount.string);
                            }
                        },

                        drawWidgetOnElement(widget, element) {
                            const priceSrc = this.getPriceSelector(widget);
                            const priceElem = document.querySelector(priceSrc);
                            if (!priceElem) {
                                return;
                            }
                            const cents = this.nodeToCents(priceElem);
                            const className = 'sequra-promotion-widget';
                            const modifierClassName = className + '--' + widget.product;

                            const oldWidget = element.parentNode.querySelector('.' + className + '.' + modifierClassName);
                            if (oldWidget) {
                                if (cents == oldWidget.getAttribute('data-amount')) {
                                    return;
                                }

                                oldWidget.remove();
                            }

                            if (!this.isAmountInAllowedRange(widget, cents)) {
                                return;
                            }

                            const promoWidgetNode = document.createElement('div');
                            promoWidgetNode.className = className + ' ' + modifierClassName;
                            promoWidgetNode.setAttribute('data-amount', cents);
                            promoWidgetNode.setAttribute('data-product', widget.product);

                            const theme = this.presets[widget.theme] ? this.presets[widget.theme] : widget.theme;
                            try {
                                const attributes = JSON.parse(theme);
                                for (let key in attributes) {
                                    promoWidgetNode.setAttribute('data-' + key, "" + attributes[key]);
                                }
                            } catch (e) {
                                promoWidgetNode.setAttribute('data-type', 'text');
                            }

                            if (widget.campaign) {
                                promoWidgetNode.setAttribute('data-campaign', widget.campaign);
                            }
                            if (widget.registrationAmount) {
                                promoWidgetNode.setAttribute('data-registration-amount', widget.registrationAmount);
                            }

                            if (element.nextSibling) {
                                element.parentNode.insertBefore(promoWidgetNode, element.nextSibling);
                                this.refreshComponents();
                            } else {
                                element.parentNode.appendChild(promoWidgetNode);
                            }
                        },
                    });
                }
            }
        }

        window.addEventListener('alpine:init', () => {
            Alpine.data('sequraInitConfig', sequraInitConfig);
        }, {once: true});
    </script>

<?php endif; ?>
